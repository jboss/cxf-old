
Apache CXF 2.3.10 Release Notes

1. Overview

The 2.3.x versions of Apache CXF are significant new versions of CXF 
that provides several new features and enhancements.  

New features include: 
 * JAX-WS 2.2 Support
 * JAX-RS 1.1 Support
 * New annotations for Java first use cases to reduce the need for 
   external configuration and provide more control over the runtime and
   generated WSDL:
     * @WSDLDocumentation annotation to add documentation nodes to generated
       wsdl
     * @SchemaValidation annotation to turn on schema validation
     * @DataBinding to set the databinding used (if other than JAXB)
     * @GZIP to turn on GZIP compression
     * @FastInfoset to turn on FastInfoset support
     * @Logging to turn on and control various Logging functionality
     * @EndpointProperty to configure endpoint properties
     * @Policy to associate WS-Policy documents with the service
 * SOAP/JMS spec implementation.  While CXF has supported SOAP over JMS 
   since 2.0, there wasn't a standard specification to describe how it 
   should be done so different vendors did things differently and 
   interoperability was impossible.  The new SOAP/JMS specification support
   implements the new SOAP/JMS spec to achieve a higher degree of 
   interoperability.  The older SOAP/JMS configuration is still supported.
   WS-Addressing also now fully works with the JMS transport when used in
   conjunction with the SOAP/JMS spec implementation.
 * SDO databinding
 * Schema Validation support for Aegis Databinding if Woodstox 4 is used 
   for the Stax parser


2.3.10 fixes over 30 JIRA issues reported by users and the community.


2. Installation Prerequisites 

Before installing Apache CXF, make sure the following products,
with the specified versions, are installed on your system:

    * Java 5 Development Kit
    * Apache ant 1.6

2.1 Java 5 Development Kit

You must install the J2SE Development Kit (JDK) 5.0, which can be downloaded
from:

    http://java.sun.com/j2se/1.5.0/download.jsp

After installing the JDK, set or modify the following environment variables:

    * JAVA_HOME -- set this environment variable
      to point at the root directory of the JDK 5.0 installation.

    * PATH -- make sure that your PATH includes: 
      %JAVA_HOME%\bin  (Windows) 
      $JAVA_HOME/bin   (UNIX)

2.2 Apache Ant 1.6.5 (or newer, 1.7.0 should work as well)

To run samples included in the binary distribution of Apache CXF,
you must install the Apache Ant 1.6.5 build utility, which can be downloaded
from:

    http://ant.apache.org/bindownload.cgi

After installing Apache Ant, add the <AntInstallDir>/bin directory to your PATH.

For more details, see the Installation Guide.

3.  Integrating CXF Into You Application

If you use Maven to build your application, you need merely add
appropriate dependencies. See the pom.xml files in the samples.

If you don't use Maven, you'll need to add one or more jars to your
classpath. The file lib/WHICH_JARS should help you decide which 
jars you need.

4. Building the Samples

Building the samples included in the binary distribution is easy. Change to
the samples directory and follow the build instructions in the README.txt file 
included with each sample.

5. Reporting Problems

If you have any problems or want to send feedback of any kind, please e-mail the
CXF dev list, dev@cxf.apache.org.  You can also file issues in JIRA at:

http://issues.apache.org/jira/browse/CXF


6. Migration notes:

See the migration guide at:
http://cxf.apache.org/docs/23-migration-guide.html
for caveats when upgrading from CXF 2.2.x to 2.3.x.


7. Specific issues, features, and improvements fixed in this version

** Bug
    * [CXF-3916] - partial response problem with SOAP 1.1 use of WS-Addressing
    * [CXF-4055] - Parameter Handler not Invoked if Constructor or Static Methods Succeed
    * [CXF-4056] - Faults on server are echoing headers back to the client
    * [CXF-4057] - Echoed Addressing headers can cause client hangs and timeouts
    * [CXF-4067] - JAX-RS WebClient proxy sometimes fails to set Content-Type from @Consumes
    * [CXF-4086] - Providers.getContextResolvers is only partially implemented 
    * [CXF-4088] - Class.getGenericSuperclass also needs to be checked by ProviderFactory
    * [CXF-4105] - Slf4jLogger doesn't mapping the level as the SLF4JBridgeHandler does
    * [CXF-4110] - Java first @Policy annotations aren't working
    * [CXF-4115] - The operation property of the MessageContext may return wrong value if erroneous request is sent
    * [CXF-4117] - Argument type mismatch when using Implicit Headers and @RequestWrapper with Service from WSDL
    * [CXF-4121] - Default WebApplicationException mapper dramatically increases the response time
    * [CXF-4125] - StackOverflowError when requesting WADL
    * [CXF-4128] - Code Gen plugin fails silently when generated classes have name collisions
    * [CXF-4130] - Server using Provider implementation writes contents of SOAP body in SOAP header
    * [CXF-4133] - CachedOutputStream lost charsetName param
    * [CXF-4141] - response_code 500 ignored when set in JAXRSOutInterceptor.handleWriteException 
    * [CXF-4149] - org.apache.cxf.endpoint.ClientImpl raises 
    * [CXF-4171] - Static resource resolution not possible with CXFNonSpringJaxrsServlet
    * [CXF-4172] - Default JAX-RS XML, JSON and Form providers are open to the hash collision attacks
    * [CXF-4177] - ClientProxyImpl does not order Path parameter values according to the template order
    * [CXF-4192] - WSDLValidator doesn't pass the test for WSI-BP-1.0 R2726
    * [CXF-4195] - http-config conduit doesn't work on the http conduit for WsdlUrl
    * [CXF-4200] - UriInfoImpl.getPathSegments(decode) does not pass 'decode' flag to getPath()
    * [CXF-4227] - AttachmentDeserializerTest contains buggy code for reading an InputStream.
    * [CXF-4231] - Incorrect handling of "If-None-Match" and "If-Modified-Since" request header combination

** Improvement
    * [CXF-4085] - introduce org.apache.cxf.jaxws.checkPublishEndpointPermissionWithSecurityManager for EndpointImpl so that get chance to bypass SecurityManager Check in some cases
    * [CXF-4120] - JMS Transport content-type should be consistent with the HTTP transport
    * [CXF-4134] - GZIPOutInterceptor compiles Patterns constantly; they should be compiled once and reused
    * [CXF-4217] - Introduce Nullable annotations to override the default handling of empty payloads by JAXB providers


